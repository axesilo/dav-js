{"version":3,"sources":["../src/tests/Kafka.test.ts"],"names":[],"mappings":"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","file":"Kafka.test.js","sourcesContent":["import Config from '../Config';\nimport IConfig from '../IConfig';\nimport BasicParams from '../BasicParams';\nimport { Observable } from '../common-types';\nimport KafkaMessageStream, { IKafkaMessage } from '../KafkaMessageStream';\nimport BidParams from '../BidParams';\nimport DroneChargingBidParams from '../drone-charging/BidParams';\n\ndescribe('Kafka class', () => {\n  let config: IConfig = new Config({\n    /*kafkaBrowserPollingInterval: 3000, kafkaBrowserRequestTimeout: 1000,\n  kafkaSeedUrls: ['localhost:9092'], apiSeedUrls: ['localhost']*/\n  });\n\n  beforeEach(() => {\n    jest.resetAllMocks();\n    jest.resetModules();\n    jest.useFakeTimers();\n  });\n\n  describe('createTopic method', () => {\n    it('should create topic without errors when input is valid and no errors from kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n\n      const clientMock = {\n        on: jest.fn((state: string, cb: any) => cb()),\n        createTopics: jest.fn(\n          (topics: string[], cb: (error: any, data: any) => any) =>\n            cb(null, null),\n        ),\n        connect: jest.fn(),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.createTopic('topic', config)).resolves.toBeUndefined();\n\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(clientMock.createTopics).toHaveBeenCalledWith(\n        [{ topic: 'topic', partitions: 1, replicationFactor: 1 }],\n        expect.any(Function),\n      );\n      expect(clientMock.connect).toHaveBeenCalledTimes(1);\n    });\n\n    xit('should get error from client while trying to connect to kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => {\n          if (state === 'error') {\n            cb('Client got error in connection');\n          }\n        }),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.createTopic('topic', config)).rejects.toBe(\n        'Client got error in connection',\n      );\n      expect(clientMock.on).toHaveBeenCalledWith('error', expect.anything());\n    });\n\n    xit('should get error from kafka in topic creation method', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n\n      const kafkaError = 'kafka error';\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n        createTopics: jest.fn(\n          (topics: string[], cb: (error: any, data: any) => any) =>\n            cb(kafkaError, null),\n        ),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.createTopic('topic', config)).rejects.toBe(kafkaError);\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(clientMock.createTopics).toHaveBeenCalledWith(\n        [{ topic: 'topic', partitions: 1, replicationFactor: 1 }],\n        expect.any(Function),\n      );\n    });\n  });\n\n  describe('sendParams method', () => {\n    it('should send message to kafka without errors when input is valid and no errors from kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n      const content: any = {\n        id: 1,\n        price: 3,\n        serialize: jest.fn(() => content),\n      };\n      const paramsMockType = jest.fn<BasicParams>(() => content);\n      const paramsMock = new paramsMockType();\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      const producerMock = {\n        send: jest.fn(\n          (\n            payloads: Array<{ topic: string; messages: string }>,\n            cb: (error: any, data: any) => any,\n          ) => cb(null, null),\n        ),\n      };\n      require('kafka-node').Producer.mockImplementation(() => producerMock);\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(\n        kafka.sendParams('topic', paramsMock, config),\n      ).resolves.toBeUndefined();\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(producerMock.send).toHaveBeenCalledWith(\n        [{ topic: 'topic', messages: JSON.stringify(content) }],\n        expect.any(Function),\n      );\n    });\n\n    xit('should get error from producer while trying to connect to kafka', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n      const paramsMockType = jest.fn<BasicParams>(() => ({\n        serialize: () => {\n          return 'basic params mock content';\n        },\n      }));\n      const paramsMock = new paramsMockType();\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => {\n          if (state === 'error') {\n            cb('Client got error in connection');\n          }\n        }),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n\n      await expect(kafka.sendParams('topic', paramsMock, config)).rejects.toBe(\n        'Client got error in connection',\n      );\n      expect(clientMock.on).toHaveBeenCalledWith('error', expect.anything());\n    });\n\n    xit('should get error from kafka in send method', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n      const content: any = {\n        id: 1,\n        price: 3,\n        serialize: jest.fn(() => content),\n      };\n      const paramsMockType = jest.fn<BasicParams>(() => content);\n      const paramsMock = new paramsMockType();\n\n      const clientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      const producerMock = {\n        send: jest.fn(\n          (\n            payloads: Array<{ topic: string; messages: string }>,\n            cb: (error: any, data: any) => any,\n          ) => cb('kafka error', null),\n        ),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(() => clientMock);\n      require('kafka-node').Producer.mockImplementation(() => producerMock);\n\n      await expect(kafka.sendParams('topic', paramsMock, config)).rejects.toBe(\n        'kafka error',\n      );\n      expect(clientMock.on).toHaveBeenCalledWith('ready', expect.anything());\n      expect(producerMock.send).toHaveBeenCalledWith(\n        [{ topic: 'topic', messages: JSON.stringify(content) }],\n        expect.anything(),\n      );\n    });\n  });\n\n  describe('messages method', () => {\n    xit('should get error from kafka client while trying to connect', async () => {\n      jest.doMock('kafka-node');\n      const kafka = (await import('../Kafka')).default;\n\n      const kafkaClientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => {\n          if (state === 'error') {\n            cb('client got error in connection');\n          }\n        }),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(\n        () => kafkaClientMock,\n      );\n\n      await expect(kafka.messages('topic', config)).rejects.toBe(\n        'client got error in connection',\n      );\n      expect(kafkaClientMock.on).toHaveBeenCalledWith(\n        'error',\n        expect.anything(),\n      );\n    });\n\n    xit('should get message stream with one message when get valid input and no errors from kafka', async done => {\n      jest.doMock('kafka-node');\n\n      const kafkaClientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(\n        () => kafkaClientMock,\n      );\n\n      const jsonObject = {\n        protocol: 'drone-charging',\n        type: 'bid',\n        price: '3',\n      };\n      const jsonString = JSON.stringify(jsonObject);\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest\n          .fn()\n          .mockImplementation((messageStream: Observable<IKafkaMessage>) =>\n            messageStream.subscribe(bid => {\n              expect(bid).toEqual({\n                type: 'bid',\n                protocol: 'drone-charging',\n                contents: jsonString,\n              });\n              expect(kafkaClientMock.on).toBeCalledWith(\n                'ready',\n                expect.anything(),\n              );\n              expect(consumerMock.on).toHaveBeenCalledWith(\n                'message',\n                expect.anything(),\n              );\n              done();\n              return {};\n            }),\n          ),\n      }));\n\n      const consumerMock = {\n        on: jest.fn((state: string, cb: any) => {\n          cb({ topic: 'topic', value: jsonString });\n        }),\n      };\n      require('kafka-node').Consumer.mockImplementation(() => consumerMock);\n      const kafka = (await import('../Kafka')).default;\n\n      await kafka.messages('topic', config);\n    });\n\n    xit('should throw error due to parsing error', async done => {\n      jest.doMock('kafka-node');\n\n      const kafkaClientMock = {\n        connect: jest.fn(),\n        on: jest.fn((state: string, cb: any) => cb()),\n      };\n      require('kafka-node').KafkaClient.mockImplementation(\n        () => kafkaClientMock,\n      );\n\n      const topic = 'topic';\n      const jsonString = '{bad format}}';\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest\n          .fn()\n          .mockImplementation((messageStream: Observable<IKafkaMessage>) =>\n            messageStream.subscribe(\n              bid => {\n                fail();\n                done();\n              },\n              error => {\n                const correctError = error.startsWith(\n                  'error while trying to parse message.',\n                );\n                expect(correctError).toBe(true);\n                expect(kafkaClientMock.on).toHaveBeenCalledWith(\n                  'ready',\n                  expect.anything(),\n                );\n                expect(consumerMock.on).toHaveBeenCalledWith(\n                  'message',\n                  expect.anything(),\n                );\n                done();\n              },\n            ),\n          ),\n      }));\n\n      const consumerMock = {\n        on: jest.fn((state: string, cb: any) =>\n          cb({ topic, value: jsonString }),\n        ),\n      };\n      require('kafka-node').Consumer.mockImplementation(() => consumerMock);\n      const kafka = (await import('../Kafka')).default;\n\n      await kafka.messages(topic, config);\n    });\n  });\n\n  describe('browser implementation', () => {\n    beforeAll(() => {\n      config = { apiSeedUrls: ['testUrl'] };\n      process.env = { BROWSER: 'true' };\n    });\n\n    beforeEach(() => {\n      jest.resetModules();\n      jest.resetAllMocks();\n    });\n\n    describe('createTopic method', () => {\n      it('should create topic without errors when input is valid', async () => {\n        const postMock = jest.fn((url: string) =>\n          Promise.resolve({ status: 200 }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await expect(\n          kafka.createTopic('testTopic', config),\n        ).resolves.toBeUndefined();\n        expect(postMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/create/testTopic',\n        );\n      });\n\n      it('should fail to create topic due to error from api', async () => {\n        const postMock = jest.fn((url: string) =>\n          Promise.resolve({ status: 500, data: { error: 'kafka error' } }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await expect(kafka.createTopic('testTopic', config)).rejects.toEqual(\n          'kafka error',\n        );\n        expect(postMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/create/testTopic',\n        );\n      });\n\n      it('should fail to create topic due to network error', async () => {\n        const postMock = jest.fn((url: string) =>\n          Promise.reject('net::ERR_CONNECTION_REFUSED'),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await expect(kafka.createTopic('testTopic', config)).rejects.toEqual(\n          'net::ERR_CONNECTION_REFUSED',\n        );\n        expect(postMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/create/testTopic',\n        );\n      });\n    });\n\n    describe('sendParams method', () => {\n      it('should send params without errors when input is valid', async () => {\n        const paramsObject: any = {\n          id: 1,\n          price: 3,\n          serialize: jest.fn(() => paramsObject),\n        };\n        const paramsMockType = jest.fn<BasicParams>(() => paramsObject);\n        const paramsMock = new paramsMockType();\n\n        const postMock = jest.fn((url: string, content: string, conf: any) =>\n          Promise.resolve({ status: 200 }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await expect(\n          kafka.sendParams('testTopic', paramsMock, config),\n        ).resolves.toBeUndefined();\n        expect(postMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/publish/testTopic',\n          JSON.stringify(paramsObject),\n          expect.anything(),\n        );\n      });\n\n      it('should fail to send params due to error from api', async () => {\n        const paramsObject: any = {\n          id: 1,\n          price: 3,\n          serialize: jest.fn(() => paramsObject),\n        };\n        const paramsMockType = jest.fn<BasicParams>(() => paramsObject);\n        const paramsMock = new paramsMockType();\n\n        const postMock = jest.fn((url: string, conf: any) =>\n          Promise.resolve({ status: 500, data: { error: 'kafka error' } }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await expect(\n          kafka.sendParams('testTopic', paramsMock, config),\n        ).rejects.toBe('kafka error');\n        expect(postMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/publish/testTopic',\n          JSON.stringify(paramsObject),\n          expect.anything(),\n        );\n      });\n\n      it('should fail to send params due to network error', async () => {\n        const paramsObject: any = {\n          id: 1,\n          price: 3,\n          serialize: jest.fn(() => paramsObject),\n        };\n        const paramsMockType = jest.fn<BasicParams>(() => paramsObject);\n        const paramsMock = new paramsMockType();\n\n        const postMock = jest.fn((url: string, conf: any) =>\n          Promise.reject('net::ERR_CONNECTION_REFUSED'),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            post: postMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await expect(\n          kafka.sendParams('testTopic', paramsMock, config),\n        ).rejects.toBe('net::ERR_CONNECTION_REFUSED');\n        expect(postMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/publish/testTopic',\n          JSON.stringify(paramsObject),\n          expect.anything(),\n        );\n      });\n    });\n\n    describe('messages method', () => {\n      it('should get message stream with one message when get valid input and no errors', async done => {\n        const jsonObject = {\n          protocol: 'drone-charging',\n          type: 'bid',\n          price: '3',\n        };\n        const jsonString = JSON.stringify(jsonObject);\n\n        const getMock = jest.fn((url: string, conf: any) =>\n          Promise.resolve({ status: 200, data: [jsonString] }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n\n        jest.doMock('../KafkaMessageStream', () => ({\n          default: jest\n            .fn()\n            .mockImplementation((messageStream: Observable<IKafkaMessage>) =>\n              messageStream.subscribe(bid => {\n                expect(bid).toEqual({\n                  type: 'bid',\n                  protocol: 'drone-charging',\n                  contents: jsonString,\n                });\n                expect(getMock).toHaveBeenCalledTimes(1);\n                done();\n                return {};\n              }),\n            ),\n        }));\n\n        const kafka = (await import('../Kafka')).default;\n\n        await kafka.messages('testTopic', config);\n      });\n\n      xit('should get message stream with two messages in one get call when get valid input and no errors', async () => {\n        jest.doMock('../drone-charging/BidParams');\n        const jsonObject = {\n          protocol: 'drone-charging',\n          type: 'bid',\n          price: '3',\n        };\n        const secondJsonObject = {\n          protocol: 'drone-charging',\n          type: 'bid',\n          price: '62',\n        };\n        const jsonString = JSON.stringify([jsonObject, secondJsonObject]);\n\n        const fromJsonVerifiable = jest\n          .fn((jsonStringParam: string) => secondJsonObject)\n          .mockReturnValueOnce(jsonObject);\n        require('../drone-charging/BidParams').default.fromJson.mockImplementation(\n          fromJsonVerifiable,\n        );\n\n        const getMock = jest.fn((url: string, content: string) =>\n          Promise.resolve({ status: 200, data: jsonString }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        const observable: Observable<BasicParams> = null; // await kafka.messages('testTopic', config);\n        const messageArray: any[] = [];\n        let counter = 0;\n        const messages = await new Promise((resolve, reject) => {\n          observable.subscribe(\n            next => {\n              messageArray.push(next);\n              counter++;\n              if (counter === 2) {\n                resolve(messageArray);\n              }\n            },\n            error => reject(error),\n          );\n        });\n        expect(messages).toEqual([jsonObject, secondJsonObject]);\n        expect(getMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/consume/testTopic',\n        );\n      });\n\n      xit('should get message stream with two messages in two get calls when get valid input and no errors', async () => {\n        jest.useRealTimers();\n        jest.doMock('../drone-charging/BidParams');\n        const jsonObject = {\n          protocol: 'drone-charging',\n          type: 'bid',\n          price: '3',\n        };\n        const secondJsonObject = {\n          protocol: 'drone-charging',\n          type: 'bid',\n          price: '62',\n        };\n        const secondJsonString = JSON.stringify([secondJsonObject]);\n        const jsonString = JSON.stringify([jsonObject]);\n\n        const fromJsonVerifiable = jest\n          .fn((jsonStringParam: string) => secondJsonObject)\n          .mockReturnValueOnce(jsonObject);\n        require('../drone-charging/BidParams').default.fromJson.mockImplementation(\n          fromJsonVerifiable,\n        );\n\n        const getMock = jest\n          .fn((url: string, content: string) =>\n            Promise.resolve({ status: 200, data: secondJsonString }),\n          )\n          .mockReturnValueOnce(\n            Promise.resolve({ status: 200, data: jsonString }),\n          );\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        const observable: Observable<BasicParams> = null; // await kafka.paramsStream('testTopic', config);\n        const messageArray: any[] = [];\n        let counter = 0;\n        const messages = await new Promise((resolve, reject) => {\n          observable.subscribe(\n            next => {\n              messageArray.push(next);\n              counter++;\n              if (counter === 2) {\n                resolve(messageArray);\n              }\n            },\n            error => reject(error),\n          );\n        });\n        expect(messages).toEqual([jsonObject, secondJsonObject]);\n        expect(getMock).toHaveBeenCalledWith(\n          'http://testUrl/topic/consume/testTopic',\n        );\n        expect(getMock).toHaveBeenCalledTimes(2);\n      });\n\n      it('should throw error due to network error', async done => {\n        jest.doMock('../KafkaMessageStream', () => ({\n          default: jest\n            .fn()\n            .mockImplementation((messageStream: Observable<IKafkaMessage>) =>\n              messageStream.subscribe(\n                bid => {\n                  fail();\n                  done();\n                },\n                error => {\n                  expect(error).toBe('net::ERR_CONNECTION_REFUSED');\n                  done();\n                },\n              ),\n            ),\n        }));\n\n        const getMock = jest.fn((url: string, content: string) =>\n          Promise.reject('net::ERR_CONNECTION_REFUSED'),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await kafka.messages('testTopic', config);\n      });\n\n      it('should throw error due to bad response from api', async done => {\n        jest.doMock('../KafkaMessageStream', () => ({\n          default: jest\n            .fn()\n            .mockImplementation((messageStream: Observable<IKafkaMessage>) =>\n              messageStream.subscribe(\n                bid => {\n                  fail();\n                  done();\n                },\n                error => {\n                  expect(error).toBe('internal error');\n                  done();\n                },\n              ),\n            ),\n        }));\n\n        const getMock = jest.fn((url: string, content: string) =>\n          Promise.resolve({ status: 500, data: { error: 'internal error' } }),\n        );\n        jest.doMock('axios', () => ({\n          default: {\n            get: getMock,\n          },\n        }));\n        const kafka = (await import('../Kafka')).default;\n\n        await kafka.messages('testTopic', config);\n      });\n    });\n  });\n});\n"]}