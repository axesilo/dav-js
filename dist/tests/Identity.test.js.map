{"version":3,"sources":["../src/tests/Identity.test.ts"],"names":[],"mappings":";;AAAA,sCAA+B;AAE/B,kCAA2B;AAC3B,0EAAmE;AACnE,8DAAuD;AACvD,oEAA6D;AAC7D,uGAAmF;AACnF,4DAAqD;AACrD,kDAAiD;AACjD,wCAAiC;AACjC,wCAAiC;AACjC,gCAAyB;AACzB,kDAA2C;AAE3C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,MAAM,QAAQ,GAAG,UAAU,CAAC;IAC5B,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC;IAC1C,MAAM,YAAY,GAAG,EAAE,GAAG,EAAE,gBAAgB,EAAE,CAAC;IAC/C,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,EAAE,CAAY,CAAC;IACzC,MAAM,gBAAgB,GAAG,IAAI,0BAAgB,CAAC;QAC5C,QAAQ,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QAC/B,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;IACH,MAAM,UAAU,GAAG,IAAI,oBAAU,CAAC;QAChC,QAAQ,EAAE;YACR,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,SAAS;SAChB;KACF,CAAC,CAAC;IACH,MAAM,SAAS,GAAG,IAAI,mBAAS,CAAC;QAC9B,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE;QACzB,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IACH,MAAM,aAAa,GAAG,IAAI,uBAAa,CAAC;QACtC,EAAE,EAAE,YAAY;QAChB,WAAW,EAAE,QAAQ;QACrB,SAAS,EAAE,QAAQ;QACnB,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC5B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,MAAM,SAAS,GAAG;YAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;YACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;SAC9C,CAAC;QAEF,SAAS,CAAC,GAAG,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC7B,OAAO,EAAE,SAAS;aACnB,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1B,OAAO,EAAE,mBAAS;aACnB,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACrE,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACrD,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;YACpD,MAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtE,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC1C,MAAM,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CACzC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,gBAAgB,QAAQ,EAAE,EAClD,UAAU,CAAC,SAAS,EAAE,CACvB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACtD,mBAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YACtE,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACrD,MAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC5D,yBAAyB,YAAY,EAAE,CACxC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC1D,SAAS,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAC5C,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAC3B,CAAC;YACF,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACrD,MAAM,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC5D,2BAA2B,UAAU,EAAE,CACxC,CAAC;YACF,MAAM,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,MAAM,WAAW,GAAG,IAAI,oBAAU,CAAC;YACjC,QAAQ,EAAE;gBACR,GAAG,EAAE,SAAS;gBACd,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,oBAAU,CAAC;YACjC,QAAQ,EAAE;gBACR,GAAG,EAAE,SAAS;gBACd,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,IAAI,oBAAU,CAAC;YACjC,QAAQ,EAAE;gBACR,GAAG,EAAE,SAAS;gBACd,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1B,OAAO,EAAE,mBAAS;aACnB,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,sBAAsB,GAAG;gBAC7B,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CACvB,yBAAU,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CACzD;aACF,CAAC;YACF,MAAM,SAAS,GAAG;gBAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7C,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;aACjE,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1C,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC;aACpE,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAExD,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,gBAAgB,EAAE,oBAAU,CAAC,CAAC;YACxE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACrB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,cAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,MAAM,CAAC,CACxC,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,cAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,MAAM,CAAC,CACxC,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CACzC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,QAAQ,EAAE,EACnD,gBAAgB,CAAC,SAAS,EAAE,CAC7B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,wDAAwD;QACxD,yGAAyG;QACzG,8CAA8C;QAC9C,gEAAgE;QAChE,8DAA8D;QAC9D,kCAAkC;QAClC,gCAAgC;QAChC,6EAA6E;QAC7E,2CAA2C;QAC3C,8BAA8B;QAC9B,kDAAkD;QAClD,gDAAgD;QAChD,wDAAwD;QACxD,0DAA0D;QAC1D,0EAA0E;QAC1E,oIAAoI;QACpI,MAAM;QAEN,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,SAAS,GAAG;gBAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aAC9C,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAExD,mBAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YACtE,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,MAAM,CACV,QAAQ,CAAC,YAAY,CAAC,gBAAgB,EAAE,oBAAU,CAAC,CACpD,CAAC,OAAO,CAAC,OAAO,CAAC,8BAA8B,YAAY,EAAE,CAAC,CAAC;YAChE,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CACzC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,QAAQ,EAAE,EACnD,gBAAgB,CAAC,SAAS,EAAE,CAC7B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,SAAS,GAAG;gBAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aAC9C,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAExD,SAAS,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAC5C,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAC3B,CAAC;YACF,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,MAAM,CACV,QAAQ,CAAC,YAAY,CAAC,gBAAgB,EAAE,oBAAU,CAAC,CACpD,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,UAAU,EAAE,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,CAAC,mBAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CACzC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,QAAQ,EAAE,EACnD,gBAAgB,CAAC,SAAS,EAAE,CAC7B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAChC,MAAM,cAAc,GAAG,IAAI,uBAAa,CAAC;YACvC,EAAE,EAAE,cAAc;YAClB,WAAW,EAAE,QAAQ;YACrB,SAAS,EAAE,QAAQ;YACnB,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QACH,MAAM,cAAc,GAAG,IAAI,uBAAa,CAAC;YACvC,EAAE,EAAE,cAAc;YAClB,WAAW,EAAE,QAAQ;YACrB,SAAS,EAAE,QAAQ;YACnB,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QACH,MAAM,cAAc,GAAG,IAAI,uBAAa,CAAC;YACvC,EAAE,EAAE,cAAc;YAClB,WAAW,EAAE,QAAQ;YACrB,SAAS,EAAE,QAAQ;YACnB,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1B,OAAO,EAAE,mBAAS;aACnB,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,sBAAsB,GAAG;gBAC7B,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CACvB,yBAAU,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC,CAClE;aACF,CAAC;YACF,MAAM,SAAS,GAAG;gBAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7C,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;aACjE,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1C,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC;aACpE,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAEvD,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,uBAAa,CAAC,CAAC;YACxD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,gBAAgB,EAAE,CAAC;YACzB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CACjE,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CACjE,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,MAAM,sBAAsB,GAAG;gBAC7B,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CACvB,yBAAU,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC,CAClE;aACF,CAAC;YACF,MAAM,SAAS,GAAG;gBAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7C,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;aACjE,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1C,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC;aACpE,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAExD,MAAM,YAAY,GAAG,cAAc,CAAC;YACpC,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,uBAAa,EAAE,YAAY,CAAC,CAAC;YACtE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,gBAAgB,EAAE,CAAC;YACzB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,YAAY,EAAE,cAAc,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CACrE,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,YAAY,EAAE,cAAc,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CACrE,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YACjD,wHAAwH;YACxH,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC3C,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACzC,MAAM,gBAAgB,EAAE,CAAC;YACzB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,SAAS,GAAG;gBAChB,eAAe,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;gBACxC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBACtD,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;aACpB,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAExD,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,gBAAgB,EAAE,CAAC;YACzB,MAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAC/C,2BAA2B,UAAU,EAAE,CACxC,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,cAAI,CAAC,YAAY,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,aAAG,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAC9B,eAAe,EACf,eAAe,EACf,aAAa,CACd,CAAC;YACF,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CACrB,IAAI,iBAAO,CAAC,eAAe,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,CAAC,CACrE,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,SAAS,CAAC,GAAG,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1B,OAAO,EAAE,mBAAS;aACnB,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,cAAc,GAAG,IAAI,oCAAa,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC;YACtE,MAAM,cAAc,GAAG,IAAI,oCAAa,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC;YACtE,MAAM,cAAc,GAAG,IAAI,oCAAa,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC;YAEtE,MAAM,sBAAsB,GAAG;gBAC7B,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CACvB,yBAAU,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC,CAClE;aACF,CAAC;YACF,MAAM,SAAS,GAAG;gBAChB,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;aACjE,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1C,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC;aACpE,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAEvD,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,oCAAa,CAAC,CAAC;YACxD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,CAC9C,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,CAC9C,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAClC,IAAI,iBAAO,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,CAC9C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,GAAG,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC3C,wHAAwH;YACxH,yCAAyC;YACzC,MAAM,QAAQ,GAAQ,CAAC,2CAAa,aAAa,EAAC,CAAC,CAAC,OAAO,CAAC;YAC5D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACzD,MAAM,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC3C,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACzC,MAAM,gBAAgB,EAAE,CAAC;YACzB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACpC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"Identity.test.js","sourcesContent":["import Config from '../Config';\nimport IConfig from '../IConfig';\nimport Need from '../Need';\nimport NeedFilterParams from '../vessel-charging/NeedFilterParams';\nimport NeedParams from '../vessel-charging/NeedParams';\nimport MissionParams from '../vessel-charging/MissionParams';\nimport MessageParams from '../vessel-charging/messages/StatusRequestMessageParams';\nimport BidParams from '../vessel-charging/BidParams';\nimport { Observable, ID } from '../common-types';\nimport Message from '../Message';\nimport Mission from '../Mission';\nimport Bid from '../Bid';\nimport AxiosMock from '../mocks/AxiosMock';\n\ndescribe('Identity class', () => {\n  const TOPIC_ID = 'TOPIC_ID';\n  const kafkaError = { msg: 'Kafka error' };\n  const davNodeError = { msg: 'Dav node error' };\n  const config = new Config({}) as IConfig;\n  const needFilterParams = new NeedFilterParams({\n    location: { lat: 10, long: 10 },\n    radius: 1000,\n  });\n  const needParams = new NeedParams({\n    location: {\n      lat: 32.050382,\n      long: 34.766149,\n    },\n  });\n  const bidParams = new BidParams({\n    vehicleId: 'DAV_ID',\n    availableFrom: Date.now(),\n    price: '100',\n  });\n  const missionParams = new MissionParams({\n    id: 'MISSION_ID',\n    neederDavId: 'DAV_ID',\n    vehicleId: 'DAV_ID',\n    price: '100',\n  });\n\n  const forContextSwitch = () => {\n    return new Promise((resolve, reject) => {\n      jest.useRealTimers();\n      setTimeout(resolve, 0);\n      jest.useFakeTimers();\n    });\n  };\n\n  describe('publishNeed method', () => {\n    const kafkaMock = {\n      generateTopicId: jest.fn(() => TOPIC_ID),\n      createTopic: jest.fn(() => Promise.resolve()),\n    };\n\n    beforeAll(() => {\n      jest.doMock('../Kafka', () => ({\n        default: kafkaMock,\n      }));\n      jest.doMock('axios', () => ({\n        default: AxiosMock,\n      }));\n    });\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    xit('should call relevant functions and return valid need', async () => {\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('id', 'davId', config);\n      const need = new Need(TOPIC_ID, needParams, config);\n      await expect(identity.publishNeed(needParams)).resolves.toEqual(need);\n      expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n      expect(AxiosMock.post).toHaveBeenCalled();\n      expect(AxiosMock.post).toHaveBeenCalledWith(\n        `${config.apiSeedUrls[0]}/publishNeed/${TOPIC_ID}`,\n        needParams.serialize(),\n      );\n    });\n\n    xit('should fail due to dav node exception', async () => {\n      AxiosMock.post.mockImplementation(() => Promise.reject(davNodeError));\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('id', 'davId', config);\n      await expect(identity.publishNeed(needParams)).rejects.toThrow(\n        `Fail to publish need: ${davNodeError}`,\n      );\n    });\n\n    xit('should fail due to topic creation failure', async () => {\n      kafkaMock.createTopic.mockImplementation(() =>\n        Promise.reject(kafkaError),\n      );\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('id', 'davId', config);\n      await expect(identity.publishNeed(needParams)).rejects.toThrow(\n        `Fail to create a topic: ${kafkaError}`,\n      );\n      expect(AxiosMock.post).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('needsForType method', () => {\n    const needParams1 = new NeedParams({\n      location: {\n        lat: 32.050382,\n        long: 34.766149,\n      },\n    });\n    const needParams2 = new NeedParams({\n      location: {\n        lat: 32.050382,\n        long: 34.766149,\n      },\n    });\n    const needParams3 = new NeedParams({\n      location: {\n        lat: 32.050382,\n        long: 34.766149,\n      },\n    });\n\n    beforeAll(() => {\n      jest.doMock('axios', () => ({\n        default: AxiosMock,\n      }));\n    });\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n      jest.resetAllMocks();\n      jest.resetModules();\n    });\n\n    it('should receive needs and relevant functions', async () => {\n      const kafkaMessageStreamMock = {\n        filterType: jest.fn(() =>\n          Observable.from([needParams1, needParams2, needParams3]),\n        ),\n      };\n      const kafkaMock = {\n        generateTopicId: jest.fn(() => TOPIC_ID),\n        createTopic: jest.fn(() => Promise.resolve()),\n        messages: jest.fn(() => Promise.resolve(kafkaMessageStreamMock)),\n      };\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation(() => kafkaMessageStreamMock),\n      }));\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const spy = jest.fn();\n      const needs = await identity.needsForType(needFilterParams, NeedParams);\n      needs.subscribe(spy);\n      expect(spy.mock.calls.length).toBe(3);\n      expect(spy.mock.calls[0][0]).toEqual(\n        new Need(TOPIC_ID, needParams1, config),\n      );\n      expect(spy.mock.calls[1][0]).toEqual(\n        new Need(TOPIC_ID, needParams2, config),\n      );\n      expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n      expect(AxiosMock.post).toHaveBeenCalledWith(\n        `${config.apiSeedUrls[0]}/needsForType/${TOPIC_ID}`,\n        needFilterParams.serialize(),\n      );\n    });\n\n    // xit('should receive Kafka error event', async () => {\n    //   kafkaMock.paramsStream.mockImplementation(() => Observable.fromPromise(Promise.reject(kafkaError)));\n    //   // tslint:disable-next-line:variable-name\n    //   const Identity: any = (await import('./Identity')).default;\n    //   const identity = new Identity('selfId', 'davId', config);\n    //   const successSpy = jest.fn();\n    //   const errorSpy = jest.fn();\n    //   const needs = await identity.needsForType(needFilterParams, NeedParams);\n    //   needs.subscribe(successSpy, errorSpy);\n    //   await forContextSwitch();\n    //   expect(successSpy.mock.calls.length).toBe(0);\n    //   expect(errorSpy.mock.calls.length).toBe(1);\n    //   expect(errorSpy.mock.calls[0][0]).toBe(kafkaError);\n    //   expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n    //   expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n    //   expect(AxiosMock.post).toHaveBeenCalledWith(`${config.apiSeedUrls[0]}/needsForType/${TOPIC_ID}`, needFilterParams.serialize());\n    // });\n\n    it('should fail due to dav node exception', async () => {\n      const kafkaMock = {\n        generateTopicId: jest.fn(() => TOPIC_ID),\n        createTopic: jest.fn(() => Promise.resolve()),\n      };\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n\n      AxiosMock.post.mockImplementation(() => Promise.reject(davNodeError));\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      await expect(\n        identity.needsForType(needFilterParams, NeedParams),\n      ).rejects.toThrow(`Needs registration failed: ${davNodeError}`);\n      expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n      expect(AxiosMock.post).toHaveBeenCalledWith(\n        `${config.apiSeedUrls[0]}/needsForType/${TOPIC_ID}`,\n        needFilterParams.serialize(),\n      );\n    });\n\n    xit('should fail due to topic creation failure', async () => {\n      const kafkaMock = {\n        generateTopicId: jest.fn(() => TOPIC_ID),\n        createTopic: jest.fn(() => Promise.resolve()),\n      };\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n\n      kafkaMock.createTopic.mockImplementation(() =>\n        Promise.reject(kafkaError),\n      );\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      await expect(\n        identity.needsForType(needFilterParams, NeedParams),\n      ).rejects.toThrow(`Fail to create a topic: ${kafkaError}`);\n      expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n      expect(AxiosMock.post).toHaveBeenCalledWith(\n        `${config.apiSeedUrls[0]}/needsForType/${TOPIC_ID}`,\n        needFilterParams.serialize(),\n      );\n    });\n  });\n\n  xdescribe('missions method', () => {\n    const missionParams1 = new MissionParams({\n      id: 'MISSION_ID_1',\n      neederDavId: 'DAV_ID',\n      vehicleId: 'DAV_ID',\n      price: '100',\n    });\n    const missionParams2 = new MissionParams({\n      id: 'MISSION_ID_2',\n      neederDavId: 'DAV_ID',\n      vehicleId: 'DAV_ID',\n      price: '100',\n    });\n    const missionParams3 = new MissionParams({\n      id: 'MISSION_ID_3',\n      neederDavId: 'DAV_ID',\n      vehicleId: 'DAV_ID',\n      price: '100',\n    });\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n      jest.resetAllMocks();\n      jest.resetModules();\n      jest.doMock('axios', () => ({\n        default: AxiosMock,\n      }));\n    });\n\n    it('should receive missions and relevant functions', async () => {\n      const kafkaMessageStreamMock = {\n        filterType: jest.fn(() =>\n          Observable.from([missionParams1, missionParams2, missionParams3]),\n        ),\n      };\n      const kafkaMock = {\n        generateTopicId: jest.fn(() => TOPIC_ID),\n        createTopic: jest.fn(() => Promise.resolve()),\n        messages: jest.fn(() => Promise.resolve(kafkaMessageStreamMock)),\n      };\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation(() => kafkaMessageStreamMock),\n      }));\n      jest.doMock('./Kafka', () => ({ default: kafkaMock }));\n\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const spy = jest.fn();\n      const missions = await identity.missions(MissionParams);\n      missions.subscribe(spy);\n      await forContextSwitch();\n      expect(spy.mock.calls.length).toBe(3);\n      expect(spy.mock.calls[0][0]).toEqual(\n        new Mission(TOPIC_ID, missionParams1.id, missionParams1, config),\n      );\n      expect(spy.mock.calls[1][0]).toEqual(\n        new Mission(TOPIC_ID, missionParams2.id, missionParams2, config),\n      );\n      expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n    });\n\n    it('should receive missions with specified topicId and relevant functions', async () => {\n      const kafkaMessageStreamMock = {\n        filterType: jest.fn(() =>\n          Observable.from([missionParams1, missionParams2, missionParams3]),\n        ),\n      };\n      const kafkaMock = {\n        generateTopicId: jest.fn(() => TOPIC_ID),\n        createTopic: jest.fn(() => Promise.resolve()),\n        messages: jest.fn(() => Promise.resolve(kafkaMessageStreamMock)),\n      };\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation(() => kafkaMessageStreamMock),\n      }));\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n\n      const anotherTopic = 'anotherTopic';\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const spy = jest.fn();\n      const missions = await identity.missions(MissionParams, anotherTopic);\n      missions.subscribe(spy);\n      await forContextSwitch();\n      expect(spy.mock.calls.length).toBe(3);\n      expect(spy.mock.calls[0][0]).toEqual(\n        new Mission(anotherTopic, missionParams1.id, missionParams1, config),\n      );\n      expect(spy.mock.calls[1][0]).toEqual(\n        new Mission(anotherTopic, missionParams2.id, missionParams2, config),\n      );\n      expect(kafkaMock.generateTopicId).not.toHaveBeenCalled();\n      expect(kafkaMock.createTopic).not.toHaveBeenCalled();\n    });\n\n    xit('should receive Kafka error event', async () => {\n      // kafkaMock.paramsStream.mockImplementation(() => Promise.resolve(Observable.fromPromise(Promise.reject(kafkaError))));\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const successSpy = jest.fn();\n      const errorSpy = jest.fn();\n      const missions = await identity.missions();\n      missions.subscribe(successSpy, errorSpy);\n      await forContextSwitch();\n      expect(successSpy.mock.calls.length).toBe(0);\n      expect(errorSpy.mock.calls.length).toBe(1);\n      expect(errorSpy.mock.calls[0][0]).toBe(kafkaError);\n    });\n\n    it('should fail due to topic creation failure', async () => {\n      const kafkaMock = {\n        generateTopicId: jest.fn(() => TOPIC_ID),\n        createTopic: jest.fn(() => Promise.reject(kafkaError)),\n        messages: jest.fn(),\n      };\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      await forContextSwitch();\n      await expect(identity.missions()).rejects.toThrow(\n        `Fail to create a topic: ${kafkaError}`,\n      );\n      expect(kafkaMock.generateTopicId).toHaveBeenCalled();\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(TOPIC_ID, config);\n      expect(kafkaMock.messages).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('need method', () => {\n    it('should succeed, validate need', async () => {\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const need = identity.need('needSelfId', needParams);\n      expect(need).toEqual(new Need('needSelfId', needParams, config));\n    });\n  });\n\n  describe('bid method', () => {\n    it('should succeed, validate bid', async () => {\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const bid = identity.bid('bidId', bidParams);\n      expect(bid).toEqual(new Bid('bidId', bidParams, config));\n    });\n  });\n\n  describe('mission method', () => {\n    it('should succeed, validate mission', async () => {\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const mission = identity.mission(\n        'missionSelfId',\n        'missionPeerId',\n        missionParams,\n      );\n      expect(mission).toEqual(\n        new Mission('missionSelfId', 'missionPeerId', missionParams, config),\n      );\n    });\n  });\n\n  describe('messages method', () => {\n    beforeAll(() => {\n      jest.doMock('axios', () => ({\n        default: AxiosMock,\n      }));\n    });\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n      jest.resetAllMocks();\n      jest.resetModules();\n    });\n\n    xit('should receive message events', async () => {\n      const messageParams1 = new MessageParams({ senderId: 'SOURCE_ID_1' });\n      const messageParams2 = new MessageParams({ senderId: 'SOURCE_ID_2' });\n      const messageParams3 = new MessageParams({ senderId: 'SOURCE_ID_3' });\n\n      const kafkaMessageStreamMock = {\n        filterType: jest.fn(() =>\n          Observable.from([messageParams1, messageParams2, messageParams3]),\n        ),\n      };\n      const kafkaMock = {\n        messages: jest.fn(() => Promise.resolve(kafkaMessageStreamMock)),\n      };\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation(() => kafkaMessageStreamMock),\n      }));\n      jest.doMock('./Kafka', () => ({ default: kafkaMock }));\n\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const spy = jest.fn();\n      const messages = await identity.messages(MessageParams);\n      messages.subscribe(spy);\n      expect(spy.mock.calls.length).toBe(3);\n      expect(spy.mock.calls[0][0]).toEqual(\n        new Message('selfId', messageParams1, config),\n      );\n      expect(spy.mock.calls[1][0]).toEqual(\n        new Message('selfId', messageParams2, config),\n      );\n      expect(spy.mock.calls[2][0]).toEqual(\n        new Message('selfId', messageParams3, config),\n      );\n    });\n\n    xit('should receive error event', async () => {\n      // kafkaMock.paramsStream.mockImplementation(() => Promise.resolve(Observable.fromPromise(Promise.reject(kafkaError))));\n      // tslint:disable-next-line:variable-name\n      const Identity: any = (await import('../Identity')).default;\n      const identity = new Identity('selfId', 'davId', config);\n      const successSpy = jest.fn();\n      const errorSpy = jest.fn();\n      const messages = await identity.messages();\n      messages.subscribe(successSpy, errorSpy);\n      await forContextSwitch();\n      expect(successSpy.mock.calls.length).toBe(0);\n      expect(errorSpy).toHaveBeenCalled();\n      expect(errorSpy.mock.calls[0][0]).toBe(kafkaError);\n    });\n  });\n});\n"]}