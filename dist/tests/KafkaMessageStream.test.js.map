{"version":3,"sources":["../src/tests/KafkaMessageStream.test.ts"],"names":[],"mappings":"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","file":"KafkaMessageStream.test.js","sourcesContent":["import KafkaMessageStream, { IKafkaMessage } from '../KafkaMessageStream';\nimport { Observable } from '../common-types';\nimport typesMap from '../drone-delivery/ProtocolTypes';\nimport DroneDeliveryNeedParams from '../drone-delivery/NeedParams';\nimport DroneDeliveryMissionParams from '../drone-delivery/MissionParams';\nimport KafkaMessageFactory, { MessageCategories } from '../KafkaMessageFactory';\n\ndescribe('KafkaMessageStream', () => {\n  it('should instantiate', () => {\n    const kafkaStream = Observable.fromObservable(Observable.from([]), '');\n    const message = new KafkaMessageStream(kafkaStream);\n    expect(message).toBeDefined();\n  });\n\n  it('should instantiate filtered stream', () => {\n    const kafkaStream = Observable.fromObservable(Observable.from([]), '');\n    const messageStream = new KafkaMessageStream(kafkaStream);\n    const stream = messageStream.filterType(typesMap.messages);\n    expect(stream).toBeDefined();\n  });\n\n  it('should pass message', done => {\n    expect.assertions(1);\n\n    // tslint:disable-next-line:max-classes-per-file\n    class MessageMock {\n      public deserialize() {\n        return '';\n      }\n    }\n    KafkaMessageFactory.instance.registerMessageClasses([\n      {\n        protocol: 'drone_delivery',\n        messageType: 'need',\n        messageCategory: MessageCategories.Need,\n        classType: MessageMock,\n      },\n    ]);\n\n    const kafkaMessages: IKafkaMessage[] = [\n      { protocol: 'drone_delivery', type: 'need', contents: '{}' },\n    ];\n    const kafkaStream = Observable.fromObservable(\n      Observable.from(kafkaMessages),\n      '',\n    );\n    const messageStream = new KafkaMessageStream(kafkaStream);\n    const stream = messageStream.filterType(typesMap.needs);\n    stream.subscribe(\n      need => {\n        expect(need).toBeDefined();\n      },\n      error => {\n        fail(error);\n        done();\n      },\n      () => {\n        done();\n      },\n    );\n  });\n\n  it('should filter message', done => {\n    const kafkaMessages: IKafkaMessage[] = [\n      { protocol: 'drone_delivery', type: 'need', contents: '{}' },\n    ];\n    const kafkaStream = Observable.fromObservable(\n      Observable.from(kafkaMessages),\n      '',\n    );\n    const messageStream = new KafkaMessageStream(kafkaStream);\n    const stream = messageStream.filterType(typesMap.bids);\n    stream.subscribe(\n      need => {\n        fail('No message should pass');\n        done();\n      },\n      error => {\n        fail(error);\n        done();\n      },\n      () => {\n        done();\n      },\n    );\n  });\n\n  xit('should filter first message and pass second when first is not correct type and second is', done => {\n    expect.assertions(1);\n\n    // tslint:disable-next-line:max-classes-per-file\n    class MessageMock {\n      public deserialize() {\n        return '';\n      }\n    }\n    KafkaMessageFactory.instance.registerMessageClasses([\n      {\n        protocol: 'drone_delivery',\n        messageType: 'need',\n        messageCategory: MessageCategories.Need,\n        classType: MessageMock,\n      },\n      {\n        protocol: 'drone_delivery',\n        messageType: 'not_need',\n        messageCategory: MessageCategories.Need,\n        classType: MessageMock,\n      },\n    ]);\n\n    const kafkaMessages: IKafkaMessage[] = [\n      {\n        protocol: 'drone_delivery',\n        type: 'not_need',\n        contents:\n          '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":\"3000\", \"startAt\":1}',\n      },\n      {\n        protocol: 'drone_delivery',\n        type: 'need',\n        contents:\n          '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":2}',\n      },\n    ];\n    const kafkaStream = Observable.fromObservable(\n      Observable.from(kafkaMessages),\n      '',\n    );\n    const messageStream = new KafkaMessageStream(kafkaStream);\n    const stream = messageStream.filterType(typesMap.needs);\n    const passedMessages: any[] = [];\n    stream.subscribe(\n      need => {\n        passedMessages.push(need);\n      },\n      error => {\n        fail(error);\n      },\n      () => {\n        const formattedNeedParams = new DroneDeliveryNeedParams();\n        formattedNeedParams.deserialize(\n          JSON.parse(\n            '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}',\n          ),\n        );\n        expect(passedMessages).toMatchObject([formattedNeedParams]);\n        done();\n      },\n    );\n  });\n\n  xit('should pass first message and filter second when first is correct type and second is not', done => {\n    // expect.assertions(1);\n    const kafkaMessages: IKafkaMessage[] = [\n      {\n        protocol: 'drone_delivery',\n        type: 'need',\n        contents:\n          '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}',\n      },\n      {\n        protocol: 'drone_delivery',\n        type: 'not_need',\n        contents:\n          '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":2}',\n      },\n    ];\n    const kafkaStream = Observable.fromObservable(\n      Observable.from(kafkaMessages),\n      '',\n    );\n    const messageStream = new KafkaMessageStream(kafkaStream);\n    const stream = messageStream.filterType(typesMap.needs);\n    const passedMessages: any[] = [];\n    stream.subscribe(\n      need => {\n        passedMessages.push(need);\n      },\n      error => {\n        fail(error);\n      },\n      () => {\n        const formattedNeedParams = new DroneDeliveryNeedParams();\n        formattedNeedParams.deserialize(\n          JSON.parse(\n            '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}',\n          ),\n        );\n        expect(passedMessages).toEqual([formattedNeedParams]);\n        done();\n      },\n    );\n  });\n\n  xit('should pass each type to correct stream', done => {\n    expect.assertions(2);\n    const kafkaMessages: IKafkaMessage[] = [\n      {\n        protocol: 'drone_delivery',\n        type: 'need',\n        contents:\n          '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":1}',\n      },\n      {\n        protocol: 'drone_delivery',\n        type: 'mission',\n        contents:\n          '{\"id\":\"1\",\"price\":{\"type\":\"flat\",\"value\":\"1000\"},\"vehicleId\":\"DAV_ID\",\"neederDavId\":\"abc\",\"protocol\":\"DroneDelivery\",\"type\":\"Mission\",' +\n          ' \"ttl\":3000}',\n      },\n      {\n        protocol: 'drone_delivery',\n        type: 'need',\n        contents:\n          '{\"id\":\"123\", \"protocol\":\"DroneDelivery\", \"type\":\"Bid\", \"ttl\":3000, \"startAt\":2}',\n      },\n      {\n        protocol: 'drone_delivery',\n        type: 'mission',\n        contents:\n          '{\"id\":\"2\",\"price\":{\"type\":\"flat\",\"value\":\"1000\"},\"vehicleId\":\"DAV_ID\",\"neederDavId\":\"abc\",\"protocol\":\"DroneDelivery\",\"type\":\"Mission\",' +\n          ' \"ttl\":3000}',\n      },\n    ];\n    const kafkaStream = Observable.fromObservable(\n      Observable.from(kafkaMessages),\n      '',\n    );\n    const messageStream = new KafkaMessageStream(kafkaStream);\n    const streamNeeds = messageStream.filterType(typesMap.needs);\n    const streamMissions = messageStream.filterType(typesMap.missions);\n\n    const passedNeeds: any[] = [];\n    const passedMissions: any[] = [];\n    let doneNeeds = false;\n    let doneMissions = false;\n\n    const test = () => {\n      if (doneMissions && doneNeeds) {\n        const formattedNeedParams1 = new DroneDeliveryNeedParams();\n        formattedNeedParams1.deserialize(JSON.parse(kafkaMessages[0].contents));\n        const formattedNeedParams2 = new DroneDeliveryNeedParams();\n        formattedNeedParams2.deserialize(JSON.parse(kafkaMessages[2].contents));\n        expect(passedNeeds).toEqual([\n          formattedNeedParams1,\n          formattedNeedParams2,\n        ]);\n        const expectedMission1 = new DroneDeliveryMissionParams();\n        expectedMission1.deserialize(JSON.parse(kafkaMessages[1].contents));\n        const expectedMission2 = new DroneDeliveryMissionParams();\n        expectedMission2.deserialize(JSON.parse(kafkaMessages[3].contents));\n        expect(passedMissions).toEqual([expectedMission1, expectedMission2]);\n        done();\n      }\n    };\n\n    streamNeeds.subscribe(\n      need => {\n        passedNeeds.push(need);\n      },\n      error => {\n        fail(error);\n      },\n      () => {\n        doneNeeds = true;\n        test();\n      },\n    );\n\n    streamMissions.subscribe(\n      bid => {\n        passedMissions.push(bid);\n      },\n      error => {\n        fail(error);\n      },\n      () => {\n        doneMissions = true;\n        test();\n      },\n    );\n  });\n});\n"]}