{"version":3,"sources":["../src/tests/Need.test.ts"],"names":[],"mappings":"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","file":"Need.test.js","sourcesContent":["import Config from '../Config';\nimport BidParams from '../drone-charging/BidParams';\nimport NeedParams from '../drone-charging/NeedParams';\nimport Price from '../Price';\nimport { PriceType } from '../common-enums';\nimport Message from '../Message';\nimport { Observable } from '../common-types';\nimport MessageParams from '../drone-charging/MessageParams';\nimport Bid from '../Bid';\n\nconst forContextSwitch = () => {\n  return new Promise((resolve, reject) => {\n    jest.useRealTimers();\n    setTimeout(resolve, 0);\n    jest.useFakeTimers();\n  });\n};\n\ndescribe('Need class', () => {\n  const config = new Config({});\n  const selfId = 'SELF_ID';\n  const topicId = 'TOPIC_ID';\n  const needParams = new NeedParams({});\n  const kafkaError = { msg: 'Kafka error' };\n  let bidParams = new BidParams({\n    id: 'BID_ID',\n    price: new Price('3', PriceType.flat),\n    vehicleId: 'DAV_ID',\n  });\n  bidParams.id = 'bidSource';\n\n  describe('createBid method', () => {\n    const kafkaMock = {\n      generateTopicId: jest.fn(() => topicId),\n      createTopic: jest.fn(() => Promise.resolve()),\n      sendParams: jest.fn(() => Promise.resolve()),\n      messages: jest.fn(() =>\n        Promise.resolve({ filterType: jest.fn(() => Observable.from([])) }),\n      ),\n    };\n\n    beforeEach(() => {\n      jest.resetModules();\n      jest.clearAllMocks();\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n    });\n\n    it('should create correct bid when input is valid', async () => {\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      const bid = await need.createBid(bidParams);\n      expect(bid.id).toBe(topicId);\n      expect(bid.params).toBe(bidParams);\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(topicId, config);\n      expect(kafkaMock.sendParams).toHaveBeenCalledWith(\n        needParams.id,\n        bidParams,\n        config,\n      );\n    });\n\n    it('should throw exception when sendParams throws error', async () => {\n      kafkaMock.sendParams.mockImplementation(() => Promise.reject(kafkaError));\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      await expect(need.createBid(bidParams)).rejects.toEqual(kafkaError);\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(topicId, config);\n    });\n\n    it('should throw exception when createTopic throws error', async () => {\n      kafkaMock.createTopic.mockImplementation(() =>\n        Promise.reject(kafkaError),\n      );\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      await expect(need.createBid(bidParams)).rejects.toThrow(\n        `Fail to create a topic: ${kafkaError}`,\n      );\n      expect(kafkaMock.createTopic).toHaveBeenCalledWith(topicId, config);\n      expect(kafkaMock.sendParams).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('bids method', () => {\n    beforeEach(() => {\n      jest.resetModules();\n      jest.clearAllMocks();\n      bidParams = new BidParams({\n        id: 'BID_ID',\n        price: new Price('3', PriceType.flat),\n        vehicleId: 'DAV_ID',\n      });\n    });\n\n    it('should create bid observable with one message', async () => {\n      const kafkaMessageStreamMock = {\n        filterType: jest.fn(() => Observable.from([bidParams])),\n      };\n      const kafkaMock = {\n        messages: jest.fn(() => Promise.resolve(kafkaMessageStreamMock)),\n      };\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation(() => kafkaMessageStreamMock),\n      }));\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      const bids = await need.bids();\n      const bid = await new Promise<any>((resolve, reject) => {\n        bids.subscribe(next => resolve(next), error => reject(error));\n      });\n      expect(kafkaMock.messages).toHaveBeenCalledWith(selfId, config);\n      expect(bid.params.id).toBe('BID_ID');\n      expect(bid.params.price[0].value).toBe('3');\n    });\n\n    xit('should throw error when paramsStream throws error', async () => {\n      // kafkaMock.messages.mockImplementation(() => Observable.fromPromise(Promise.reject(kafkaError)));\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      const bids = await need.bids();\n      const bid = new Promise<any>((resolve, reject) => {\n        bids.subscribe(next => resolve(next), error => reject(error));\n      });\n      await expect(bid).rejects.toEqual(kafkaError);\n      // expect(kafkaMock.messages).toHaveBeenCalledWith(needParams.id, config);\n    });\n  });\n\n  describe('sendMessage method', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n      jest.resetModules();\n    });\n\n    it('should succeed, validate kafka mock send message', async () => {\n      const kafkaMock = {\n        sendParams: () => Promise.resolve(true),\n      };\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      await expect(\n        need.sendMessage(new MessageParams({})),\n      ).resolves.toBeDefined();\n    });\n\n    it('should fail due to kafka exception', async () => {\n      const kafkaMock = {\n        sendParams: () => Promise.reject(kafkaError),\n      };\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      await expect(need.sendMessage(new MessageParams({}))).rejects.toBe(\n        kafkaError,\n      );\n    });\n\n    it('should call to Kafka sendParams', async () => {\n      const kafkaMock = {\n        sendParams: jest.fn(params => Promise.resolve(true)),\n      };\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      const messageParams = new MessageParams({});\n      await need.sendMessage(messageParams);\n      expect(kafkaMock.sendParams).toHaveBeenCalledWith(\n        needParams.id,\n        messageParams,\n        config,\n      );\n    });\n\n    it('should throw because topic id == selfId', async () => {\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(needParams.id, needParams, config);\n      const messageParams = new MessageParams({});\n      await expect(need.sendMessage(messageParams)).rejects.toThrow(\n        'You cannot send message to your own channel',\n      );\n    });\n  });\n\n  describe('messages method', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n      jest.resetModules();\n    });\n\n    it('should receive message events', async () => {\n      const messageParams1 = new MessageParams({ senderId: 'SOURCE_ID_1' });\n      const messageParams2 = new MessageParams({ senderId: 'SOURCE_ID_2' });\n      const messageParams3 = new MessageParams({ senderId: 'SOURCE_ID_3' });\n\n      const kafkaMessageStreamMock = {\n        filterType: jest.fn(() =>\n          Observable.from([messageParams1, messageParams2, messageParams3]),\n        ),\n      };\n      const kafkaMock = {\n        messages: jest.fn(() => Promise.resolve(kafkaMessageStreamMock)),\n      };\n      jest.doMock('../KafkaMessageStream', () => ({\n        default: jest.fn().mockImplementation(() => kafkaMessageStreamMock),\n      }));\n      jest.doMock('../Kafka', () => ({ default: kafkaMock }));\n\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      const spy = jest.fn();\n      const messages = await need.messages();\n      messages.subscribe(spy);\n      expect(spy.mock.calls.length).toBe(3);\n      expect(spy.mock.calls[0][0]).toEqual(\n        new Message(selfId, messageParams1, config),\n      );\n      expect(spy.mock.calls[1][0]).toEqual(\n        new Message(selfId, messageParams2, config),\n      );\n      expect(spy.mock.calls[2][0]).toEqual(\n        new Message(selfId, messageParams3, config),\n      );\n    });\n\n    xit('should receive error event', async () => {\n      jest.doMock('../Kafka', () => ({\n        default: {\n          paramsStream: async () =>\n            Observable.fromPromise(Promise.reject(kafkaError)),\n        },\n      }));\n\n      // tslint:disable-next-line:variable-name\n      const Need = (await import('../Need')).default;\n      const need = new Need(selfId, needParams, config);\n      const successSpy = jest.fn();\n      const errorSpy = jest.fn();\n      const messages = await need.messages();\n      messages.subscribe(successSpy, errorSpy);\n      await forContextSwitch();\n      expect(successSpy.mock.calls.length).toBe(0);\n      expect(errorSpy.mock.calls.length).toBe(1);\n      expect(errorSpy.mock.calls[0][0]).toBe(kafkaError);\n    });\n  });\n});\n"]}